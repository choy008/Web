---
import Layout from '../../layouts/Default.astro';
import BigButton from '../../components/core/BigButton.astro';
import * as Utilities from '../../scripts/utilities';

// Dynamic routing
export async function getStaticPaths() {
	let paths = [];
	await Utilities.forEachProject((projectName, projectData) => {
		paths.push({
			params: { project: projectName },
			props: { projectData: projectData }
		});
	});

	return paths;
}

// Content block pre-processing
const { project } = Astro.params;
const { projectData } = Astro.props;

// Construct component library
const componentsGlob = await Astro.glob('../../components/content_blocks/*.astro');
let components = {};
componentsGlob.forEach(component => {
	let name = Utilities.extractFilename(component.file).toLowerCase();
	components[name] = component.default
});

// Construct page content
let pageContent = [];
for (let i = 0; i < projectData.page.length; i++)
{
	const contentDefinition = projectData.page[i];
	
	if (contentDefinition.type in components) {
		pageContent.push({
			'component': components[contentDefinition.type],
			'properties': contentDefinition,
		});
	}
	else {
		Utilities.logError(`Unknown content type "${contentDefinition.type}" is defined in ${projectData.title}`);
	}
}

// Layout variables
const pageInfo = {
	'titlePrepend': projectData.title,
	'description': projectData.description,
	'image': `assets/projects/${project}/thumb.jpg`,
	'tab': 'projects',
};
---
<Layout pageInfo={pageInfo}>
	<div class="project-detail-wrapper">
		<div class="project-detail">

			<!-- Title -->
			<h1 class="project-title">{projectData.title}</h1>

			<!-- Tags -->
			<div class="tag-wrapper">
				<div class="tag-row">
				{projectData.tags.map((tag) => {
					return <div class="tag">{tag}</div>
				})}
				</div>
			</div>
			
			<!-- Links -->
			{projectData.links && (
				<div>
					<div class="tag-wrapper">
					{projectData.links.map((link) => (
						<>
							<a class="tile link" href={link.link} target="_blank">
								<img class="link-tile-icon" src="/assets/svg/external-link-alt.svg" onload="fadeIn(this);"/>
								<div class="link-tile-text">{link.title}</div>
							</a>
						</>
					))}
					</div>
				</div>
			)}

			<!-- Content blocks -->
			{pageContent.map((block, index) => {
				let Component = block.component;

				let ComponentContentBlockData = {};
				ComponentContentBlockData['properties'] = block.properties;
				ComponentContentBlockData['index'] = index;

				let ComponentProjectData = {};
				ComponentProjectData['name'] = project;
				ComponentProjectData['hasLinks'] = 'links' in projectData;
				
				return <Component
					project={ComponentProjectData}
					contentBlock={ComponentContentBlockData}
				/>
			})}
		</div>
	</div>
	<div class="back-to-projects-wrapper">
		<BigButton
			text="Back to projects"
			link="/projects/"
			icon="/assets/svg/folder-open.svg"
		/>
	</div>
</Layout>

<script>
	let aspectContainers = document.getElementsByClassName("aspect-container");
	let descs = document.getElementsByClassName("content-description");

	function updateAspectContainers()
	{
		for (let i = 0; i < aspectContainers.length; i++)
		{
			let container = aspectContainers[i] as HTMLElement;
			let aspectRatio = Number(container.dataset.width) / Number(container.dataset.height);

			let padding = 180;
			if (container.dataset.first_padding === 'true') padding += 100;
			if (container.dataset.desc_padding === 'true') padding += 100;
			if (container.dataset.links_padding === 'true') padding += 100;

			let width, height;

			if (window.innerWidth > 776)
			{
				//Desktop
				let maxWidth = container.parentElement.offsetWidth;
				height = Math.max(window.innerHeight - padding, 400);
				width = (height * aspectRatio);

				if (width > maxWidth)
				{
					width = maxWidth;
					height = width / aspectRatio;
				}
			}
			else
			{
				// Mobile
				width = window.innerWidth;
				height = width / aspectRatio;
			}

			container.style.height = height + 'px';
			container.style.width = width + 'px';
		}

		// Descriptions update
		for (let i = 0; i < descs.length; i++)
		{
			let desc = descs[i] as HTMLElement;
			let target = document.getElementById(desc.dataset.target);
			desc.style.width = (target.offsetWidth - 62) + 'px';
		}
	}

	window.addEventListener('resize', () => {
		updateAspectContainers();
	});

	updateAspectContainers();
</script>

<style>
	.project-detail-wrapper {
		max-width: 1000px;
		margin: 30px auto;
	}

	.project-detail {
		padding: 0 52px;
		text-align: center;
		min-height: calc(100vh - 348px);
	}

	h1 {
		text-align: center;
	}

	.back-to-projects-wrapper {
		text-align: center;
		margin: 60px 0px 50px;
	}

	.project-title {
		margin: 0.2em 0;
		font-size: 45px;
	}

	.tag-wrapper {
		margin-bottom: 20px;
		display: flex;
		justify-content: center;
	}

	.tag-row {
		padding: 4px 8px;
	}

	.tag {
		position: relative;
		font-family: 'Catamaran', sans-serif;
		font-weight: 600;
		display: inline-block;
		font-size: 18px;
		padding: 4px 8px;
		color: #333;
		background: #f0f0f0;
		border-radius: 4px;
		margin: 0px 3px;
	}

	.link-tile-icon {
		opacity: 0;
	}

	@media (max-width: 776px) {
		.project-detail {
			padding: 0;
			min-height: calc(100vh - 324px);
		}

		.image-center, .project-detail-wrapper {
			margin: 0;
		}

		.back-to-projects-wrapper {
			margin-top: 10px;
		}

		.project-title {
			font-size: 36px;
		}

		.tag {
			margin-top: 3px;
			margin-bottom: 3px;
		}

		.tag-wrapper {
			flex-direction: column;
		}
	}

	@media (min-width: 2101px) {
		.project-detail-wrapper {
			max-width: 1200px;
		}

		.project-detail {
			min-height: calc(100vh - 377px);
		}
	}
</style>

<style is:global>
	p {
		position: relative;
		padding: 22px 30px;
		text-align: left;
	}

	.textarea {
		color: #222;
		background: #fff;
		border: 1px solid #ccc;
		border-radius: 5px;
		line-height: normal;
	}

	.border-radius-top,
	.border-radius-top iframe,
	.border-radius-top video {
		border-radius: 5px 5px 0px 0px;
	}

	.border-radius-full,
	.border-radius-full iframe,
	.border-radius-full video {
		border-radius: 5px;
	}

	@media (max-width: 776px) {
		.textarea {
			background: none;
			border: none;
			padding: 22px 22px;
			margin: 0;
			margin-bottom: 20px;
			width: calc(100% - 44px) !important;
			text-align: left;
		}

		.border-radius-top,
		.border-radius-top iframe,
		.border-radius-top video,
		.border-radius-full,
		.border-radius-full iframe,
		.border-radius-full video {
			border-radius: 0px;
		}
	}

	@media (min-width: 2101px) {
		p {
			font-size: 20px;
		}
	}
</style>
