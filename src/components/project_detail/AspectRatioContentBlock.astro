---
import { renderMarkdown } from '../../scripts/utilities';
import ContentBlock from './ContentBlock.astro';

const { project, contentBlock, width, height } = Astro.props;

const containerId = "aspect-ratio-content-block-" + contentBlock.index;
---

<ContentBlock>
	<div 
		id={containerId}
		class="aspect-container border-radius-full"
		data-width={width}
		data-height={height}
		data-first_padding={contentBlock.index == 0 ? 'true' : 'false'}
		data-desc_padding={'desc' in contentBlock.properties ? 'true' : 'false'}
		data-links_padding={'links' in project.data && contentBlock.index == 0 ? 'true' : 'false'}
	>
		<slot/>
	</div>

	{'desc' in contentBlock.properties && (
		<div
			class="content-description textarea"
			data-target={containerId}
			set:html={renderMarkdown(contentBlock.properties.desc)}
		/>
	)}
</ContentBlock>

<script>
	let aspectContainers = document.getElementsByClassName("aspect-container");
	let descs = document.getElementsByClassName("content-description");

	function updateAspectContainers()
	{
		for (let i = 0; i < aspectContainers.length; i++)
		{
			let container = aspectContainers[i] as HTMLElement;
			let aspectRatio = Number(container.dataset.width) / Number(container.dataset.height);

			let padding = 180;
			if (container.dataset.first_padding === 'true') padding += 100;
			if (container.dataset.desc_padding === 'true') padding += 100;
			if (container.dataset.links_padding === 'true') padding += 100;

			let width, height;

			if (window.innerWidth > 776)
			{
				//Desktop
				let maxWidth = container.parentElement.offsetWidth;
				height = Math.max(window.innerHeight - padding, 400);
				width = (height * aspectRatio);

				if (width > maxWidth)
				{
					width = maxWidth;
					height = width / aspectRatio;
				}
			}
			else
			{
				// Mobile
				width = window.innerWidth;
				height = width / aspectRatio;
			}

			container.style.height = height + 'px';
			container.style.width = width + 'px';
		}

		// Descriptions update
		for (let i = 0; i < descs.length; i++)
		{
			let desc = descs[i] as HTMLElement;
			let target = document.getElementById(desc.dataset.target);
			desc.style.width = `${target.getBoundingClientRect().width}px`;
		}
	}

	// Update on window resize
	window.addEventListener('resize', () => {
		updateAspectContainers();
	});

	// Initial update
	updateAspectContainers();
	document.querySelector('body').style.opacity = '1';
</script>

<style>
	.aspect-container {
		position: relative;
		display: inline-block;
		line-height: 0;
		
		background: #eee;
		background-position: center;
		background-repeat: no-repeat;
	}

	.aspect-container:hover :global(.media-controls)  {
		opacity: 1;
	}

	.content-description {
		box-sizing: border-box;
		margin-top: 0px;
		margin-left: auto;
		margin-right: auto;
		line-height: initial;
	}

	@media (max-width: 776px) {
		.content-description {
			margin-bottom: 22px;
		}
	}
</style>